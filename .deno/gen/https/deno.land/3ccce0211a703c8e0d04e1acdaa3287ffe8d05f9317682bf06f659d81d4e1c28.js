import { kill } from "../deps.ts";
import { getEnvVars } from "./env.ts";
import { escape, isWindows, notNull } from "./util.ts";
import { log } from "./logger.ts";
import { isParallel } from "./command.ts";
import { buildCommandString } from "./build_command_string.ts";
import { ArgsForwardingMode } from "./run_script.ts";
const runningProcesses = new Set();
export async function runCommands(
  { shell, cwd, commands, prefix, additionalArgs, argsForwardingMode },
) {
  const _runCommands = async (commands) => {
    if (!commands) {
      return;
    }
    if (Array.isArray(commands)) {
      for (let command of commands) {
        await _runCommands(command);
      }
    } else {
      if (isParallel(commands)) {
        return Promise.all(commands.pll.map((c) => _runCommands(c)));
      }
      const command = commands;
      return runCommand({
        shell,
        cwd,
        command,
        prefix,
        additionalArgs,
        argsForwardingMode,
      });
    }
  };
  try {
    await _runCommands(commands);
  } catch (e) {
    runningProcesses.forEach((p) => {
      kill(p.pid, { force: true, tree: true });
      p.close();
    });
    throw e;
  }
}
async function runCommand(
  { shell, cwd, command, prefix, additionalArgs, argsForwardingMode },
) {
  const cmd = buildCommandString(command);
  let runOptions = {
    cmd: [
      shell,
      ...buildShellArgs({
        shell,
        command: cmd,
        prefix,
        additionalArgs,
        argsForwardingMode,
      }),
    ],
    cwd,
    env: getEnvVars(command),
  };
  log.debug(`Running > ${
    [
      prefix,
      cmd,
      additionalArgs && additionalArgs.length > 0
        ? additionalArgs.join(" ")
        : null,
    ].filter(notNull).join(" ")
  }`);
  const process = Deno.run(runOptions);
  runningProcesses.add(process);
  const status = await process.status();
  process.close();
  runningProcesses.delete(process);
  if (status.code !== 0) {
    throw new Error(`Command returned error code ${status.code}`);
  }
}
function buildShellArgs(
  { shell, command, prefix, additionalArgs, argsForwardingMode },
) {
  const cmd = [
    prefix,
    command,
    argsForwardingMode === ArgsForwardingMode.DIRECT && additionalArgs &&
      additionalArgs.length > 0
      ? additionalArgs.map((a) => `"${escape(a, '"')}"`).join(" ")
      : null,
  ].filter(notNull)
    .join(" ");
  if (isWindows && /^(?:.*\\)?cmd(?:\.exe)?$/i.test(shell)) {
    return ["/d", "/s", "/c", cmd];
  }
  return [
    "-c",
    cmd,
    ...(argsForwardingMode === ArgsForwardingMode.INDIRECT && additionalArgs
      ? additionalArgs
      : []),
  ];
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnVuX2NvbW1hbmRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicnVuX2NvbW1hbmRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDbEMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUN0QyxPQUFPLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQWEsTUFBTSxXQUFXLENBQUM7QUFDbEUsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUNsQyxPQUFPLEVBR0wsVUFBVSxHQUVYLE1BQU0sY0FBYyxDQUFDO0FBQ3RCLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQy9ELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRXJELE1BQU0sZ0JBQWdCLEdBQXNCLElBQUksR0FBRyxFQUFFLENBQUM7QUFXdEQsTUFBTSxDQUFDLEtBQUssVUFBVSxXQUFXLENBQUMsRUFDaEMsS0FBSyxFQUNMLEdBQUcsRUFDSCxRQUFRLEVBQ1IsTUFBTSxFQUNOLGNBQWMsRUFDZCxrQkFBa0IsR0FDQztJQUNuQixNQUFNLFlBQVksR0FBRyxLQUFLLEVBQ3hCLFFBQXdDLEVBQ3RCLEVBQUU7UUFDcEIsSUFBSSxDQUFDLFFBQVE7WUFBRSxPQUFPO1FBQ3RCLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUMzQixLQUFLLElBQUksT0FBTyxJQUFJLFFBQVEsRUFBRTtnQkFDNUIsTUFBTSxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUM7YUFDN0I7U0FDRjthQUFNO1lBQ0wsSUFBSSxVQUFVLENBQUMsUUFBUSxDQUFDLEVBQUU7Z0JBQ3hCLE9BQU8sT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUM5RDtZQUNELE1BQU0sT0FBTyxHQUFHLFFBQW1CLENBQUM7WUFDcEMsT0FBTyxVQUFVLENBQUM7Z0JBQ2hCLEtBQUs7Z0JBQ0wsR0FBRztnQkFDSCxPQUFPO2dCQUNQLE1BQU07Z0JBQ04sY0FBYztnQkFDZCxrQkFBa0I7YUFDbkIsQ0FBQyxDQUFDO1NBQ0o7SUFDSCxDQUFDLENBQUM7SUFDRixJQUFJO1FBQ0YsTUFBTSxZQUFZLENBQUMsUUFBNkMsQ0FBQyxDQUFDO0tBQ25FO0lBQUMsT0FBTyxDQUFDLEVBQUU7UUFDVixnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtZQUM3QixJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7WUFDekMsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ1osQ0FBQyxDQUFDLENBQUM7UUFDSCxNQUFNLENBQUMsQ0FBQztLQUNUO0FBQ0gsQ0FBQztBQU1ELEtBQUssVUFBVSxVQUFVLENBQUMsRUFDeEIsS0FBSyxFQUNMLEdBQUcsRUFDSCxPQUFPLEVBQ1AsTUFBTSxFQUNOLGNBQWMsRUFDZCxrQkFBa0IsR0FDQTtJQUNsQixNQUFNLEdBQUcsR0FBRyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN4QyxJQUFJLFVBQVUsR0FBb0I7UUFDaEMsR0FBRyxFQUFFO1lBQ0gsS0FBSztZQUNMLEdBQUcsY0FBYyxDQUFDO2dCQUNoQixLQUFLO2dCQUNMLE9BQU8sRUFBRSxHQUFHO2dCQUNaLE1BQU07Z0JBQ04sY0FBYztnQkFDZCxrQkFBa0I7YUFDbkIsQ0FBQztTQUNIO1FBQ0QsR0FBRztRQUNILEdBQUcsRUFBRSxVQUFVLENBQUMsT0FBTyxDQUFDO0tBQ3pCLENBQUM7SUFDRixHQUFHLENBQUMsS0FBSyxDQUNQLGFBQ0U7UUFDRSxNQUFNO1FBQ04sR0FBRztRQUNILGNBQWMsSUFBSSxjQUFjLENBQUMsTUFBTSxHQUFHLENBQUM7WUFDekMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO1lBQzFCLENBQUMsQ0FBQyxJQUFJO0tBQ1QsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FDNUIsRUFBRSxDQUNILENBQUM7SUFDRixNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3JDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUM5QixNQUFNLE1BQU0sR0FBRyxNQUFNLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUN0QyxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDaEIsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ2pDLElBQUksTUFBTSxDQUFDLElBQUksS0FBSyxDQUFDLEVBQUU7UUFDckIsTUFBTSxJQUFJLEtBQUssQ0FBQywrQkFBK0IsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7S0FDL0Q7QUFDSCxDQUFDO0FBTUQsU0FBUyxjQUFjLENBQUMsRUFDdEIsS0FBSyxFQUNMLE9BQU8sRUFDUCxNQUFNLEVBQ04sY0FBYyxFQUNkLGtCQUFrQixHQUNJO0lBQ3RCLE1BQU0sR0FBRyxHQUFHO1FBQ1YsTUFBTTtRQUNOLE9BQU87UUFDUCxrQkFBa0IsS0FBSyxrQkFBa0IsQ0FBQyxNQUFNLElBQUksY0FBYztZQUNoRSxjQUFjLENBQUMsTUFBTSxHQUFHLENBQUM7WUFDekIsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksTUFBTSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQztZQUM1RCxDQUFDLENBQUMsSUFBSTtLQUNULENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQztTQUNkLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNiLElBQUksU0FBUyxJQUFJLDJCQUEyQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRTtRQUN4RCxPQUFPLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7S0FDaEM7SUFDRCxPQUFPO1FBQ0wsSUFBSTtRQUNKLEdBQUc7UUFDSCxHQUFHLENBQUMsa0JBQWtCLEtBQUssa0JBQWtCLENBQUMsUUFBUSxJQUFJLGNBQWM7WUFDdEUsQ0FBQyxDQUFDLGNBQWM7WUFDaEIsQ0FBQyxDQUFDLEVBQUUsQ0FBQztLQUNSLENBQUM7QUFDSixDQUFDIn0=
