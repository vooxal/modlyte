const { build, run, readAll } = Deno;
export async function get(pid) {
  return (await getAll()).find((v) => v.pid === pid);
}
export async function getAll() {
  const commands = build.os == "windows"
    ? ["wmic.exe", "PROCESS", "GET", "Name,ProcessId,ParentProcessId,Status"]
    : ["ps", "-A", "-o", "comm,ppid,pid,stat"];
  const ps = run({
    cmd: commands,
    stdout: "piped",
  });
  const output = new TextDecoder().decode(await readAll(ps.stdout));
  const { success, code } = await ps.status();
  ps.stdout?.close();
  ps.close();
  if (!success || code !== 0) {
    throw new Error("Fail to get process.");
  }
  const lines = output.split("\n").filter((v) => v.trim());
  lines.shift();
  const processList = lines.map((line) => {
    const columns = line.trim().split(/\s+/);
    return {
      command: columns[0],
      ppid: +columns[1],
      pid: +columns[2],
      stat: columns[3],
    };
  });
  return processList;
}
export async function getTree() {
  const items = await getAll();
  const nest = (items, pid = 0) => {
    return items
      .filter((item) => item.ppid === pid)
      .map((item) => {
        const children = nest(items, item.pid);
        if (!children.length) {
          return item;
        } else {
          return { ...item, children };
        }
      });
  };
  return nest(items);
}
function getKillCommand(pidOrName, options = {}) {
  const killByName = typeof pidOrName === "string";
  if (build.os === "windows") {
    const commands = ["taskkill"];
    if (options.force) {
      commands.push("/f");
    }
    if (options.tree) {
      commands.push("/t");
    }
    commands.push(killByName ? "/im" : "/pid", pidOrName + "");
    return commands;
  } else if (build.os === "linux") {
    const commands = [killByName ? "killall" : "kill"];
    if (options.force) {
      commands.push("-9");
    }
    if (killByName && options.ignoreCase) {
      commands.push("-I");
    }
    commands.push(pidOrName + "");
    return commands;
  } else {
    const commands = [killByName ? "pkill" : "kill"];
    if (options.force) {
      commands.push("-9");
    }
    if (killByName && options.ignoreCase) {
      commands.push("-i");
    }
    commands.push(pidOrName + "");
    return commands;
  }
}
export async function kill(pidOrName, options = {}) {
  const commands = getKillCommand(pidOrName, options);
  const ps = run({
    cmd: commands,
    stderr: "piped",
  });
  const { success, code } = await ps.status();
  ps.stderr?.close();
  ps.close();
  if (!success || code !== 0) {
    const msg = new TextDecoder().decode(await readAll(ps.stderr));
    throw new Error(msg || "exit with code: " + code);
  }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibW9kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLE9BQU8sRUFBRSxHQUFHLElBQUksQ0FBQztBQXFCckMsTUFBTSxDQUFDLEtBQUssVUFBVSxHQUFHLENBQUMsR0FBVztJQUNuQyxPQUFPLENBQUMsTUFBTSxNQUFNLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxHQUFHLENBQUMsQ0FBQztBQUNyRCxDQUFDO0FBTUQsTUFBTSxDQUFDLEtBQUssVUFBVSxNQUFNO0lBQzFCLE1BQU0sUUFBUSxHQUFHLEtBQUssQ0FBQyxFQUFFLElBQUksU0FBUztRQUNwQyxDQUFDLENBQUMsQ0FBQyxVQUFVLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSx1Q0FBdUMsQ0FBQztRQUN6RSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxvQkFBb0IsQ0FBQyxDQUFDO0lBRTdDLE1BQU0sRUFBRSxHQUFHLEdBQUcsQ0FBQztRQUNiLEdBQUcsRUFBRSxRQUFRO1FBQ2IsTUFBTSxFQUFFLE9BQU87S0FDaEIsQ0FBQyxDQUFDO0lBRUgsTUFBTSxNQUFNLEdBQUcsSUFBSSxXQUFXLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxPQUFPLENBQUMsRUFBRSxDQUFDLE1BQU8sQ0FBQyxDQUFDLENBQUM7SUFFbkUsTUFBTSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsR0FBRyxNQUFNLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUU1QyxFQUFFLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxDQUFDO0lBRW5CLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUVYLElBQUksQ0FBQyxPQUFPLElBQUksSUFBSSxLQUFLLENBQUMsRUFBRTtRQUMxQixNQUFN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
