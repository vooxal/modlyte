import { blue, bold, gray, red } from "../deps.ts";
import { flattenCommands, normalizeScript } from "./normalize_script.ts";
import {
  isMultiCompositeScript,
  isParallelScripts,
  isScriptObject,
} from "./util.ts";
export function printScriptsInfo(config) {
  const scripts = Object.entries(config.scripts);
  console.log(`
  ðŸ¦– ${bold("Available scripts")}
  
${
    scripts.map(([name, value]) =>
      `    â€¢ ${blue(bold(name))}\n${scriptInfo(value)}`
    ).join("\n\n")
  }
    
  To run a script pass its name as the first argument to the ${
    bold("vr")
  } command:
  
  $ ${bold(`vr ${scripts[0][0]}`)}
    
  Any additional arguments will be passed to the script.
`);
}
function scriptInfo(script) {
  const info = [];
  const indent = " ".repeat(4);
  if (isScriptObject(script)) {
    if (script.desc) {
      info.push(`    ${script.desc}`);
    }
    if (script.gitHook) {
      info.push(`${indent}${gray("Runs at")} ${red(script.gitHook)}`);
    }
  } else if (isMultiCompositeScript(script)) {
    const scripts = script.filter((s) => isScriptObject(s));
    const combinedDescriptions = scripts.flatMap((s) => {
      if (typeof s === "string") {
        return [];
      }
      return s.desc;
    }).filter(Boolean);
    info.push(`${indent}${combinedDescriptions.join(", ")}`);
  } else if (isParallelScripts(script)) {
    if (script.desc) {
      info.push(`${indent}${script.desc}`);
    }
  }
  const commands = flattenCommands(normalizeScript(script, {}));
  info.push(
    gray(`${indent}$ ${
      commands.map((c) => c.cmd).slice(0, 3).join(", ")
    }${commands.length > 3 ? "..." : ""}`),
  );
  return info.join("\n");
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NyaXB0c19pbmZvLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic2NyaXB0c19pbmZvLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFNbkQsT0FBTyxFQUFFLGVBQWUsRUFBRSxlQUFlLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUN6RSxPQUFPLEVBQ0wsc0JBQXNCLEVBQ3RCLGlCQUFpQixFQUNqQixjQUFjLEdBQ2YsTUFBTSxXQUFXLENBQUM7QUFFbkIsTUFBTSxVQUFVLGdCQUFnQixDQUFDLE1BQTRCO0lBQzNELE1BQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQy9DLE9BQU8sQ0FBQyxHQUFHLENBQUM7T0FDUCxJQUFJLENBQUMsbUJBQW1CLENBQUM7O0VBRzVCLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsRUFBRSxFQUFFLENBQzVCLFNBQVMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLFVBQVUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUNsRCxDQUFDLElBQUksQ0FBQyxNQUFNLENBQ2Y7OytEQUdFLElBQUksQ0FBQyxJQUFJLENBQ1g7O01BRUksSUFBSSxDQUFDLE1BQU0sT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7OztDQUdoQyxDQUFDLENBQUM7QUFDSCxDQUFDO0FBRUQsU0FBUyxVQUFVLENBQUMsTUFBd0I7SUFDMUMsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDO0lBQ2hCLE1BQU0sTUFBTSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDN0IsSUFBSSxjQUFjLENBQUMsTUFBTSxDQUFDLEVBQUU7UUFDMUIsSUFBSSxNQUFNLENBQUMsSUFBSTtZQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUNqRCxJQUFJLE1BQU0sQ0FBQyxPQUFPLEVBQUU7WUFDbEIsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLE1BQU0sR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksR0FBRyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDakU7S0FDRjtTQUFNLElBQUksc0JBQXNCLENBQUMsTUFBTSxDQUFDLEVBQUU7UUFDekMsTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUVyRCxDQUFDO1FBQ0YsTUFBTSxvQkFBb0IsR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUU7WUFDakQsSUFBSSxPQUFPLENBQUMsS0FBSyxRQUFRO2dCQUFFLE9BQU8sRUFBRSxDQUFDO1lBQ3JDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQztRQUNoQixDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDbkIsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLE1BQU0sR0FBRyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0tBQzFEO1NBQU0sSUFBSSxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsRUFBRTtRQUNwQyxJQUFJLE1BQU0sQ0FBQyxJQUFJO1lBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLE1BQU0sR0FBRyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztLQUN2RDtJQUNELE1BQU0sUUFBUSxHQUFHLGVBQWUsQ0FBQyxlQUFlLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDOUQsSUFBSSxDQUFDLElBQUksQ0FDUCxJQUFJLENBQ0YsR0FBRyxNQUFNLEtBQUssUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUM3RCxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUNoQyxFQUFFLENBQ0gsQ0FDRixDQUFDO0lBQ0YsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3pCLENBQUMifQ==
