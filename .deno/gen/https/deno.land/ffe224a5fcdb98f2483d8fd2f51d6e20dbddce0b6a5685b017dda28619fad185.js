import { getEnvVars } from "./env.ts";
import { validateConfigData } from "./validate_config_data.ts";
import { validateScript } from "./validate_script.ts";
import { isWindows, makeFileExecutable } from "./util.ts";
import { normalizeScript } from "./normalize_script.ts";
import { log } from "./logger.ts";
import { isParallel } from "./command.ts";
import { buildCommandString } from "./build_command_string.ts";
import { escape } from "./util.ts";
import { ensureDirSync, existsSync, moveSync, path } from "../deps.ts";
const VR_MARK = "Generated by velociraptor";
export async function exportScripts(configData, scripts, outDir = "bin") {
  validateConfigData(configData);
  const { cwd, config } = configData;
  const outDirPath = path.isAbsolute(outDir) ? outDir : path.join(cwd, outDir);
  ensureDirSync(outDirPath);
  if (!scripts || scripts.length < 1) {
    scripts = Object.keys(config.scripts);
  }
  await Promise.all(scripts.map(async (script) => {
    validateScript(script, config);
    const scriptDef = config.scripts[script];
    const { scripts, ...rootConfig } = config;
    const commands = normalizeScript(scriptDef, rootConfig);
    const content = generateExecutableFile(commands);
    if (content) {
      const filePath = path.join(outDirPath, script);
      if (
        existsSync(filePath) &&
        !Deno.readTextFileSync(filePath).includes(VR_MARK)
      ) {
        moveSync(filePath, `${filePath}.bkp`);
      }
      await Deno.writeTextFile(filePath, content);
      makeFileExecutable(filePath);
    }
  }));
}
function generateExecutableFile(commands) {
  if (isWindows) {
    log.warning("Scripts exporting only supports sh.");
  }
  return `#!/bin/sh
# ${VR_MARK}

${exportCommands(commands)}
`;
}
function exportCommands(commands) {
  const _exportCommands = (commands, doGroup = false) => {
    if (!commands) {
      return "";
    }
    if (Array.isArray(commands)) {
      let res = commands.map((c) => _exportCommands(c, commands.length > 1))
        .join(" && ");
      if (doGroup) {
        res = `( ${res} )`;
      }
      return res;
    } else {
      if (isParallel(commands)) {
        return `( ${
          commands.pll.map((c) => _exportCommands(c, true)).join(" & ")
        }; wait )`;
      }
      const cmd = commands;
      let res = "";
      const envVars = getEnvVars(cmd);
      if (envVars) {
        res += Object.entries(envVars)
          .map(([key, val]) => `${key}="${escape(val, '"')}"`)
          .join(" ") + " ";
      }
      res += buildCommandString(cmd) + ' "$@"';
      if (doGroup) {
        res = `( ${res} )`;
      }
      return res;
    }
  };
  return _exportCommands(commands);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwb3J0X3NjcmlwdHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJleHBvcnRfc2NyaXB0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBR3RDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQy9ELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUN0RCxPQUFPLEVBQUUsU0FBUyxFQUFFLGtCQUFrQixFQUFhLE1BQU0sV0FBVyxDQUFDO0FBQ3JFLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUV4RCxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ2xDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDMUMsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDL0QsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUNuQyxPQUFPLEVBQUUsYUFBYSxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBRXZFLE1BQU0sT0FBTyxHQUFHLDJCQUEyQixDQUFDO0FBRTVDLE1BQU0sQ0FBQyxLQUFLLFVBQVUsYUFBYSxDQUNqQyxVQUE2QixFQUM3QixPQUFpQixFQUNqQixTQUFpQixLQUFLO0lBRXRCLGtCQUFrQixDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQy9CLE1BQU0sRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLEdBQUcsVUFBd0IsQ0FBQztJQUNqRCxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQzdF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
